local M = {}

local function format(bufnr, force)
	if force == nil then
		force = false
	end

	if vim.b.format_on_save == false and force == false then
		return
	end

	local ft = vim.bo[bufnr].filetype

	local can_format_with_null_ls = #require("null-ls.sources").get_available(ft, "NULL_LS_FORMATTING") > 0

	vim.lsp.buf.format({
		bufnr = bufnr,
		filter = function(client)
			local client_can_be_formatted = client.config
				and client.config.capabilities
				and client.config.capabilities.documentFormattingProvider == true
				and (
					client.supports_method("textDocument/formatting")
					or client.supports_method("textDocument/rangeFormatting")
				)

			-- Restrict formatting to client matching this name
			if can_format_with_null_ls and client_can_be_formatted then
				return client.name == "null-ls"
			end
			return client.name ~= "null-ls"
		end,
	})
end

function M.attach(client, bufnr, autocmd_group)
	vim.api.nvim_buf_create_user_command(bufnr, "LspAutoFormatToggle", M.toggle, { desc = "Toggle format on save" })

	vim.api.nvim_create_autocmd("BufWritePre", {
		group = autocmd_group,
		buffer = bufnr,
		callback = function()
			format(bufnr, false)
		end,
		desc = "Format file on save (setup by vim.b.format_on_save)",
	})

	vim.keymap.set({ "n", "v" }, "<leader>cf", function()
		format(bufnr, true)
	end, { buffer = bufnr, desc = "Format document" })

	vim.keymap.set("n", "<leader>uf", function()
		M.toggle()
	end, { buffer = bufnr, desc = "Toggle format on Save" })
end

function M.toggle()
	if not vim.b.format_on_save then
		vim.notify("Enabling format on save")
	else
		vim.notify("Disabling format on save")
	end
	vim.b.format_on_save = not vim.b.format_on_save
end

return M
