return {
  {
    "nvim-telescope/telescope.nvim",
    enabled = false,
    dependencies = {
      "nvim-lua/plenary.nvim",
      { "nvim-telescope/telescope-fzf-native.nvim", build = "make" },
    },

    cmd = "Telescope",
    version = false, -- telescope did only one release, so use HEAD for now
    keys = {
      { "<leader>,",  "<cmd>Telescope buffers show_all_buffers=true<cr>", desc = "Switch Buffer" },
      { "<leader>/",  "<cmd>Telescope live_grep<cr>",                     desc = "Grep (root dir)" },
      { "<leader>:",  "<cmd>Telescope command_history<cr>",               desc = "Command History" },
      -- find
      { "<leader>fb", "<cmd>Telescope buffers<cr>",                       desc = "Buffers" },
      { "<leader>ff", "<cmd>Telescope find_files<cr>",                    desc = "Find Files (root dir)" },
      { "<leader>fr", "<cmd>Telescope oldfiles<cr>",                      desc = "Recent" },
      -- git
      { "<leader>gc", "<cmd>Telescope git_commits<CR>",                   desc = "commits" },
      { "<leader>gs", "<cmd>Telescope git_status<CR>",                    desc = "status" },
      -- search
      { '<leader>s"', "<cmd>Telescope registers<cr>",                     desc = "Registers" },
      { "<leader>sa", "<cmd>Telescope autocommands<cr>",                  desc = "Auto Commands" },
      { "<leader>sb", "<cmd>Telescope current_buffer_fuzzy_find<cr>",     desc = "Buffer" },
      { "<leader>sc", "<cmd>Telescope command_history<cr>",               desc = "Command History" },
      { "<leader>sC", "<cmd>Telescope commands<cr>",                      desc = "Commands" },
      { "<leader>sd", "<cmd>Telescope diagnostics bufnr=0<cr>",           desc = "Document diagnostics" },
      { "<leader>sD", "<cmd>Telescope diagnostics<cr>",                   desc = "Workspace diagnostics" },
      { "<leader>sg", "<cmd>Telescope live_grep<cr>",                     desc = "Grep (root dir)" },
      { "<leader>sh", "<cmd>Telescope help_tags<cr>",                     desc = "Help Pages" },
      { "<leader>sH", "<cmd>Telescope highlights<cr>",                    desc = "Search Highlight Groups" },
      { "<leader>sk", "<cmd>Telescope keymaps<cr>",                       desc = "Key Maps" },
      { "<leader>sM", "<cmd>Telescope man_pages<cr>",                     desc = "Man Pages" },
      { "<leader>sm", "<cmd>Telescope marks<cr>",                         desc = "Jump to Mark" },
      { "<leader>so", "<cmd>Telescope vim_options<cr>",                   desc = "Options" },
      { "<leader>sR", "<cmd>Telescope resume<cr>",                        desc = "Resume" },
      {
        "<leader>sw",
        function()
          require("telescope.builtin").grep_string({ word_match = "-w" })
        end,
        desc = "Word (root dir)",
      },
      {
        "<leader>sW",
        function()
          require("telescope.builtin").grep_string({ cwd = false, word_match = "-w" })
        end,
        desc = "Word (cwd)",
      },
      { "<leader>sw", "<cmd>Telescope grep_string", mode = "v", desc = "Selection (root dir)" },
      {
        "<leader>sW",
        function()
          require("telescope.builtin").grep_string({ cwd = false })
        end,
        mode = "v",
        desc = "Selection (cwd)",
      },
      -- {
      -- 	"<leader>uC",
      -- 	Util.telescope("colorscheme", { enable_preview = true }),
      -- 	desc = "Colorscheme with preview",
      -- },
      {
        "<leader>ss",
        function()
          require("telescope.builtin").lsp_document_symbols({
            symbols = {
              "Class",
              "Function",
              "Method",
              "Constructor",
              "Interface",
              "Module",
              "Struct",
              "Trait",
              "Field",
              "Property",
              "Enum",
              "Constant",
            },
          })
        end,
        desc = "Goto Symbol",
      },
      {
        "<leader>sS",
        function()
          require("telescope.builtin").lsp_dynamic_workspace_symbols({
            symbols = {
              "Class",
              "Function",
              "Method",
              "Constructor",
              "Interface",
              "Module",
              "Struct",
              "Trait",
              "Field",
              "Property",
              "Enum",
              "Constant",
            },
          })
        end,
        desc = "Goto Symbol (Workspace)",
      },
    },
    opts = function()
      local actions = require("telescope.actions")

      local open_with_trouble = function(...)
        return require("trouble.providers.telescope").open_with_trouble(...)
      end
      local open_selected_with_trouble = function(...)
        return require("trouble.providers.telescope").open_selected_with_trouble(...)
      end
      local find_files_no_ignore = function()
        local action_state = require("telescope.actions.state")
        local line = action_state.get_current_line()
        require("telescope.builtin").find_files({ no_ignore = true, default_text = line })
      end
      local find_files_with_hidden = function()
        local action_state = require("telescope.actions.state")
        local line = action_state.get_current_line()
        require("telescope.builtin").find_files({ hidden = true, default_text = line })
      end

      return {
        defaults = {
          prompt_prefix = require("icons").common.prompt,
          selection_caret = require("icons").common.caret,
          path_display = {
            truncate = 1,
          },
          file_ignore_patterns = { "^./.git/", "^node_modules/" },
          layout_strategy = "horizontal",
          sorting_strategy = "ascending",
          winblend = 0,
          color_devicons = true,
          layout_config = {
            prompt_position = "top",
            horizontal = {
              preview_width = function(_, cols, _)
                if cols > 200 then
                  return math.floor(cols * 0.4)
                else
                  return math.floor(cols * 0.6)
                end
              end,
            },
            vertical = { width = 0.9, height = 0.95, preview_height = 0.5 },
            flex = { horizontal = { preview_width = 0.9 } },
          },
          mappings = {
            i = {
              ["<c-t>"] = open_with_trouble,
              ["<a-t>"] = open_selected_with_trouble,
              ["<a-i>"] = find_files_no_ignore,
              ["<a-h>"] = find_files_with_hidden,
              ["<C-Down>"] = actions.cycle_history_next,
              ["<C-Up>"] = actions.cycle_history_prev,
              ["<C-f>"] = actions.preview_scrolling_down,
              ["<C-b>"] = actions.preview_scrolling_up,
            },
            n = {
              ["q"] = actions.close,
            },
          },
        },
        pickers = {
          find_files = {
            hidden = true,
          },
          buffers = {
            ignore_current_buffer = true,
            sort_lastused = true,
            layout_config = {
              width = 120,
            },
          },
          oldfiles = {
            prompt_title = "History",
          },
          -- lsp_references = {
          -- 	previewer = false,
          -- },
        },
        extensions = {
          fzf = {
            fuzzy = true,
            override_generic_sorter = true,
            override_file_sorter = true,
            case_mode = "smart_case",
          },
        },
      }
    end,
    config = function(_, opts)
      local telescope = require("telescope")
      telescope.setup(opts)
      telescope.load_extension("fzf")
      telescope.load_extension("notify")
    end,
  },
}
